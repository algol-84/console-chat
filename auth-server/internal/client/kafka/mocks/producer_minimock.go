// Code generated by http://github.com/gojuno/minimock (v3.4.1). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/algol-84/auth/internal/client/kafka.Producer -o producer_minimock.go -n ProducerMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProducerMock implements mm_kafka.Producer
type ProducerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcClose          func() (err error)
	funcCloseOrigin    string
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mProducerMockClose

	funcProduce          func(ctx context.Context, data []byte) (err error)
	funcProduceOrigin    string
	inspectFuncProduce   func(ctx context.Context, data []byte)
	afterProduceCounter  uint64
	beforeProduceCounter uint64
	ProduceMock          mProducerMockProduce
}

// NewProducerMock returns a mock for mm_kafka.Producer
func NewProducerMock(t minimock.Tester) *ProducerMock {
	m := &ProducerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseMock = mProducerMockClose{mock: m}

	m.ProduceMock = mProducerMockProduce{mock: m}
	m.ProduceMock.callArgs = []*ProducerMockProduceParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProducerMockClose struct {
	optional           bool
	mock               *ProducerMock
	defaultExpectation *ProducerMockCloseExpectation
	expectations       []*ProducerMockCloseExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProducerMockCloseExpectation specifies expectation struct of the Producer.Close
type ProducerMockCloseExpectation struct {
	mock *ProducerMock

	results      *ProducerMockCloseResults
	returnOrigin string
	Counter      uint64
}

// ProducerMockCloseResults contains results of the Producer.Close
type ProducerMockCloseResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmClose *mProducerMockClose) Optional() *mProducerMockClose {
	mmClose.optional = true
	return mmClose
}

// Expect sets up expected params for Producer.Close
func (mmClose *mProducerMockClose) Expect() *mProducerMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("ProducerMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &ProducerMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the Producer.Close
func (mmClose *mProducerMockClose) Inspect(f func()) *mProducerMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for ProducerMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by Producer.Close
func (mmClose *mProducerMockClose) Return(err error) *ProducerMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("ProducerMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &ProducerMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &ProducerMockCloseResults{err}
	mmClose.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmClose.mock
}

// Set uses given function f to mock the Producer.Close method
func (mmClose *mProducerMockClose) Set(f func() (err error)) *ProducerMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the Producer.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the Producer.Close method")
	}

	mmClose.mock.funcClose = f
	mmClose.mock.funcCloseOrigin = minimock.CallerInfo(1)
	return mmClose.mock
}

// Times sets number of times Producer.Close should be invoked
func (mmClose *mProducerMockClose) Times(n uint64) *mProducerMockClose {
	if n == 0 {
		mmClose.mock.t.Fatalf("Times of ProducerMock.Close mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmClose.expectedInvocations, n)
	mmClose.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmClose
}

func (mmClose *mProducerMockClose) invocationsDone() bool {
	if len(mmClose.expectations) == 0 && mmClose.defaultExpectation == nil && mmClose.mock.funcClose == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmClose.mock.afterCloseCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmClose.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Close implements mm_kafka.Producer
func (mmClose *ProducerMock) Close() (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	mmClose.t.Helper()

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		mm_results := mmClose.CloseMock.defaultExpectation.results
		if mm_results == nil {
			mmClose.t.Fatal("No results are set for the ProducerMock.Close")
		}
		return (*mm_results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose()
	}
	mmClose.t.Fatalf("Unexpected call to ProducerMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished ProducerMock.Close invocations
func (mmClose *ProducerMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of ProducerMock.Close invocations
func (mmClose *ProducerMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *ProducerMock) MinimockCloseDone() bool {
	if m.CloseMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CloseMock.invocationsDone()
}

// MinimockCloseInspect logs each unmet expectation
func (m *ProducerMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to ProducerMock.Close")
		}
	}

	afterCloseCounter := mm_atomic.LoadUint64(&m.afterCloseCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && afterCloseCounter < 1 {
		m.t.Errorf("Expected call to ProducerMock.Close at\n%s", m.CloseMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && afterCloseCounter < 1 {
		m.t.Errorf("Expected call to ProducerMock.Close at\n%s", m.funcCloseOrigin)
	}

	if !m.CloseMock.invocationsDone() && afterCloseCounter > 0 {
		m.t.Errorf("Expected %d calls to ProducerMock.Close at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CloseMock.expectedInvocations), m.CloseMock.expectedInvocationsOrigin, afterCloseCounter)
	}
}

type mProducerMockProduce struct {
	optional           bool
	mock               *ProducerMock
	defaultExpectation *ProducerMockProduceExpectation
	expectations       []*ProducerMockProduceExpectation

	callArgs []*ProducerMockProduceParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProducerMockProduceExpectation specifies expectation struct of the Producer.Produce
type ProducerMockProduceExpectation struct {
	mock               *ProducerMock
	params             *ProducerMockProduceParams
	paramPtrs          *ProducerMockProduceParamPtrs
	expectationOrigins ProducerMockProduceExpectationOrigins
	results            *ProducerMockProduceResults
	returnOrigin       string
	Counter            uint64
}

// ProducerMockProduceParams contains parameters of the Producer.Produce
type ProducerMockProduceParams struct {
	ctx  context.Context
	data []byte
}

// ProducerMockProduceParamPtrs contains pointers to parameters of the Producer.Produce
type ProducerMockProduceParamPtrs struct {
	ctx  *context.Context
	data *[]byte
}

// ProducerMockProduceResults contains results of the Producer.Produce
type ProducerMockProduceResults struct {
	err error
}

// ProducerMockProduceOrigins contains origins of expectations of the Producer.Produce
type ProducerMockProduceExpectationOrigins struct {
	origin     string
	originCtx  string
	originData string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmProduce *mProducerMockProduce) Optional() *mProducerMockProduce {
	mmProduce.optional = true
	return mmProduce
}

// Expect sets up expected params for Producer.Produce
func (mmProduce *mProducerMockProduce) Expect(ctx context.Context, data []byte) *mProducerMockProduce {
	if mmProduce.mock.funcProduce != nil {
		mmProduce.mock.t.Fatalf("ProducerMock.Produce mock is already set by Set")
	}

	if mmProduce.defaultExpectation == nil {
		mmProduce.defaultExpectation = &ProducerMockProduceExpectation{}
	}

	if mmProduce.defaultExpectation.paramPtrs != nil {
		mmProduce.mock.t.Fatalf("ProducerMock.Produce mock is already set by ExpectParams functions")
	}

	mmProduce.defaultExpectation.params = &ProducerMockProduceParams{ctx, data}
	mmProduce.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmProduce.expectations {
		if minimock.Equal(e.params, mmProduce.defaultExpectation.params) {
			mmProduce.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProduce.defaultExpectation.params)
		}
	}

	return mmProduce
}

// ExpectCtxParam1 sets up expected param ctx for Producer.Produce
func (mmProduce *mProducerMockProduce) ExpectCtxParam1(ctx context.Context) *mProducerMockProduce {
	if mmProduce.mock.funcProduce != nil {
		mmProduce.mock.t.Fatalf("ProducerMock.Produce mock is already set by Set")
	}

	if mmProduce.defaultExpectation == nil {
		mmProduce.defaultExpectation = &ProducerMockProduceExpectation{}
	}

	if mmProduce.defaultExpectation.params != nil {
		mmProduce.mock.t.Fatalf("ProducerMock.Produce mock is already set by Expect")
	}

	if mmProduce.defaultExpectation.paramPtrs == nil {
		mmProduce.defaultExpectation.paramPtrs = &ProducerMockProduceParamPtrs{}
	}
	mmProduce.defaultExpectation.paramPtrs.ctx = &ctx
	mmProduce.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmProduce
}

// ExpectDataParam2 sets up expected param data for Producer.Produce
func (mmProduce *mProducerMockProduce) ExpectDataParam2(data []byte) *mProducerMockProduce {
	if mmProduce.mock.funcProduce != nil {
		mmProduce.mock.t.Fatalf("ProducerMock.Produce mock is already set by Set")
	}

	if mmProduce.defaultExpectation == nil {
		mmProduce.defaultExpectation = &ProducerMockProduceExpectation{}
	}

	if mmProduce.defaultExpectation.params != nil {
		mmProduce.mock.t.Fatalf("ProducerMock.Produce mock is already set by Expect")
	}

	if mmProduce.defaultExpectation.paramPtrs == nil {
		mmProduce.defaultExpectation.paramPtrs = &ProducerMockProduceParamPtrs{}
	}
	mmProduce.defaultExpectation.paramPtrs.data = &data
	mmProduce.defaultExpectation.expectationOrigins.originData = minimock.CallerInfo(1)

	return mmProduce
}

// Inspect accepts an inspector function that has same arguments as the Producer.Produce
func (mmProduce *mProducerMockProduce) Inspect(f func(ctx context.Context, data []byte)) *mProducerMockProduce {
	if mmProduce.mock.inspectFuncProduce != nil {
		mmProduce.mock.t.Fatalf("Inspect function is already set for ProducerMock.Produce")
	}

	mmProduce.mock.inspectFuncProduce = f

	return mmProduce
}

// Return sets up results that will be returned by Producer.Produce
func (mmProduce *mProducerMockProduce) Return(err error) *ProducerMock {
	if mmProduce.mock.funcProduce != nil {
		mmProduce.mock.t.Fatalf("ProducerMock.Produce mock is already set by Set")
	}

	if mmProduce.defaultExpectation == nil {
		mmProduce.defaultExpectation = &ProducerMockProduceExpectation{mock: mmProduce.mock}
	}
	mmProduce.defaultExpectation.results = &ProducerMockProduceResults{err}
	mmProduce.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmProduce.mock
}

// Set uses given function f to mock the Producer.Produce method
func (mmProduce *mProducerMockProduce) Set(f func(ctx context.Context, data []byte) (err error)) *ProducerMock {
	if mmProduce.defaultExpectation != nil {
		mmProduce.mock.t.Fatalf("Default expectation is already set for the Producer.Produce method")
	}

	if len(mmProduce.expectations) > 0 {
		mmProduce.mock.t.Fatalf("Some expectations are already set for the Producer.Produce method")
	}

	mmProduce.mock.funcProduce = f
	mmProduce.mock.funcProduceOrigin = minimock.CallerInfo(1)
	return mmProduce.mock
}

// When sets expectation for the Producer.Produce which will trigger the result defined by the following
// Then helper
func (mmProduce *mProducerMockProduce) When(ctx context.Context, data []byte) *ProducerMockProduceExpectation {
	if mmProduce.mock.funcProduce != nil {
		mmProduce.mock.t.Fatalf("ProducerMock.Produce mock is already set by Set")
	}

	expectation := &ProducerMockProduceExpectation{
		mock:               mmProduce.mock,
		params:             &ProducerMockProduceParams{ctx, data},
		expectationOrigins: ProducerMockProduceExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmProduce.expectations = append(mmProduce.expectations, expectation)
	return expectation
}

// Then sets up Producer.Produce return parameters for the expectation previously defined by the When method
func (e *ProducerMockProduceExpectation) Then(err error) *ProducerMock {
	e.results = &ProducerMockProduceResults{err}
	return e.mock
}

// Times sets number of times Producer.Produce should be invoked
func (mmProduce *mProducerMockProduce) Times(n uint64) *mProducerMockProduce {
	if n == 0 {
		mmProduce.mock.t.Fatalf("Times of ProducerMock.Produce mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmProduce.expectedInvocations, n)
	mmProduce.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmProduce
}

func (mmProduce *mProducerMockProduce) invocationsDone() bool {
	if len(mmProduce.expectations) == 0 && mmProduce.defaultExpectation == nil && mmProduce.mock.funcProduce == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmProduce.mock.afterProduceCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmProduce.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Produce implements mm_kafka.Producer
func (mmProduce *ProducerMock) Produce(ctx context.Context, data []byte) (err error) {
	mm_atomic.AddUint64(&mmProduce.beforeProduceCounter, 1)
	defer mm_atomic.AddUint64(&mmProduce.afterProduceCounter, 1)

	mmProduce.t.Helper()

	if mmProduce.inspectFuncProduce != nil {
		mmProduce.inspectFuncProduce(ctx, data)
	}

	mm_params := ProducerMockProduceParams{ctx, data}

	// Record call args
	mmProduce.ProduceMock.mutex.Lock()
	mmProduce.ProduceMock.callArgs = append(mmProduce.ProduceMock.callArgs, &mm_params)
	mmProduce.ProduceMock.mutex.Unlock()

	for _, e := range mmProduce.ProduceMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmProduce.ProduceMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProduce.ProduceMock.defaultExpectation.Counter, 1)
		mm_want := mmProduce.ProduceMock.defaultExpectation.params
		mm_want_ptrs := mmProduce.ProduceMock.defaultExpectation.paramPtrs

		mm_got := ProducerMockProduceParams{ctx, data}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmProduce.t.Errorf("ProducerMock.Produce got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmProduce.ProduceMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.data != nil && !minimock.Equal(*mm_want_ptrs.data, mm_got.data) {
				mmProduce.t.Errorf("ProducerMock.Produce got unexpected parameter data, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmProduce.ProduceMock.defaultExpectation.expectationOrigins.originData, *mm_want_ptrs.data, mm_got.data, minimock.Diff(*mm_want_ptrs.data, mm_got.data))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmProduce.t.Errorf("ProducerMock.Produce got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmProduce.ProduceMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmProduce.ProduceMock.defaultExpectation.results
		if mm_results == nil {
			mmProduce.t.Fatal("No results are set for the ProducerMock.Produce")
		}
		return (*mm_results).err
	}
	if mmProduce.funcProduce != nil {
		return mmProduce.funcProduce(ctx, data)
	}
	mmProduce.t.Fatalf("Unexpected call to ProducerMock.Produce. %v %v", ctx, data)
	return
}

// ProduceAfterCounter returns a count of finished ProducerMock.Produce invocations
func (mmProduce *ProducerMock) ProduceAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduce.afterProduceCounter)
}

// ProduceBeforeCounter returns a count of ProducerMock.Produce invocations
func (mmProduce *ProducerMock) ProduceBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduce.beforeProduceCounter)
}

// Calls returns a list of arguments used in each call to ProducerMock.Produce.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProduce *mProducerMockProduce) Calls() []*ProducerMockProduceParams {
	mmProduce.mutex.RLock()

	argCopy := make([]*ProducerMockProduceParams, len(mmProduce.callArgs))
	copy(argCopy, mmProduce.callArgs)

	mmProduce.mutex.RUnlock()

	return argCopy
}

// MinimockProduceDone returns true if the count of the Produce invocations corresponds
// the number of defined expectations
func (m *ProducerMock) MinimockProduceDone() bool {
	if m.ProduceMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ProduceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ProduceMock.invocationsDone()
}

// MinimockProduceInspect logs each unmet expectation
func (m *ProducerMock) MinimockProduceInspect() {
	for _, e := range m.ProduceMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProducerMock.Produce at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterProduceCounter := mm_atomic.LoadUint64(&m.afterProduceCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ProduceMock.defaultExpectation != nil && afterProduceCounter < 1 {
		if m.ProduceMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProducerMock.Produce at\n%s", m.ProduceMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProducerMock.Produce at\n%s with params: %#v", m.ProduceMock.defaultExpectation.expectationOrigins.origin, *m.ProduceMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProduce != nil && afterProduceCounter < 1 {
		m.t.Errorf("Expected call to ProducerMock.Produce at\n%s", m.funcProduceOrigin)
	}

	if !m.ProduceMock.invocationsDone() && afterProduceCounter > 0 {
		m.t.Errorf("Expected %d calls to ProducerMock.Produce at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ProduceMock.expectedInvocations), m.ProduceMock.expectedInvocationsOrigin, afterProduceCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProducerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCloseInspect()

			m.MinimockProduceInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProducerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProducerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockProduceDone()
}
